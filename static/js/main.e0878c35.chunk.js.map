{"version":3,"sources":["components/Search.js","components/ResultCard.js","components/Results.js","components/Footer.js","components/App.js","serviceWorker.js","index.js"],"names":["Search","_Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onChange","event","niceInput","target","value","replace","state","input","setState","onSearch","inherits","createClass","key","react_default","a","createElement","className","icon","type","theme","placeholder","size","allowClear","Component","Meta","Card","ResultCard","status","result","available","toLowerCase","href","url","rel","card","hoverable","loading","title","service","description","Results","results","map","res","i","message","components_ResultCard","Footer","Date","getFullYear","window","apiUrl","controller","signal","checkEndpoint","App","componentDidMount","fetch","then","response","json","responseJson","sites","catch","e","console","log","search","username","AbortController","length","checkUser","endpoint","newResults","concat","push","debouncedSearch","debounce","inputChanged","abort","components_Search","components_Results","components_Footer","Boolean","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"uSA0CeA,SAtCf,SAAAC,GAEI,SAAAD,EAAYE,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAN,IACfG,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAJ,GAAAS,KAAAH,KAAMJ,KAMVQ,SAAW,SAACC,GAER,IAAIC,EAAYD,EAAME,OAAOC,MAAMC,QAAQ,mBAAoB,IAE3DH,IAAcT,EAAKa,MAAMC,OACzBd,EAAKe,SAAS,CACVD,MAAOL,GACR,WACmB,KAAdA,GACAT,EAAKD,MAAMiB,SAASP,MAdhCT,EAAKa,MAAQ,CACTC,MAAO,IAHId,EAFvB,OAAAC,OAAAgB,EAAA,EAAAhB,CAAAJ,EAAAC,GAAAG,OAAAiB,EAAA,EAAAjB,CAAAJ,EAAA,EAAAsB,IAAA,SAAAR,MAAA,WA0BQ,OACIS,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACXH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMC,KAAK,cAAcC,MAAM,WAC/BN,EAAAC,EAAAC,cAAA,sCAEJF,EAAAC,EAAAC,cAACR,EAAA,EAAD,CAAOa,YAAY,kBAAkBC,KAAK,QAAQC,YAAU,EAAClB,MAAOR,KAAKU,MAAMC,MAAOP,SAAUJ,KAAKI,gBAhCrHV,EAAA,CAA4BiC,uBCApBC,UAASC,IAATD,MAqBOE,mLAhBP,IAAIC,EAAS/B,KAAKJ,MAAMoC,OAAOC,UAAY,YAAc,QACzD,OACIhB,EAAAC,EAAAC,cAAA,OAAKC,UAAW,QAAUW,EAAOG,eAC7BjB,EAAAC,EAAAC,cAAA,KAAGgB,KAAMnC,KAAKJ,MAAMoC,OAAOI,IAAK7B,OAAO,SAAS8B,IAAI,uBACpDpB,EAAAC,EAAAC,cAACmB,EAAA,EAAD,CAAMC,WAAS,EAACC,SAAS,GACrBvB,EAAAC,EAAAC,cAACS,EAAD,CACIa,MAAOzC,KAAKJ,MAAMoC,OAAOU,QACzBC,YAAaZ,cATZJ,aCmBViB,2LAnBP,IAAIC,EAAU7C,KAAKJ,MAAMiD,QAAQC,IAAI,SAACC,EAAKC,GAGvC,OAAkB,MAAfD,EAAIE,QACI,KAGPhC,EAAAC,EAAAC,cAAC+B,EAAD,CAAYlC,IAAKgC,EAAGhB,OAAQe,MAIpC,OACI9B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACVyB,UAhBKlB,cCcPwB,2LAZX,OACElC,EAAAC,EAAAC,cAAA,UAAQC,UAAU,UAChBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACV,SAAO,IAAIgC,MAAOC,cADvB,IACsCpC,EAAAC,EAAAC,cAAA,KAAGgB,KAAK,+EAAR,YAEtClB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACXH,EAAAC,EAAAC,cAAA,KAAGgB,KAAK,4DAAR,iCATSR,4BCKrB2B,OAAOC,OAAS,qDAChB,IAGIC,EACAC,EAJEC,EAAgBJ,OAAOC,OAAS,QAwFvBI,cAjFb,SAAAA,EAAY/D,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA2D,IACjB9D,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA6D,GAAAxD,KAAAH,KAAMJ,KAORgE,kBAAoB,WAElBC,MAAMP,OAAOC,OAAS,mBACnBO,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GACJpE,EAAKe,SAAS,CACZsD,MAAOD,MAGVE,MAAM,SAACC,GACNC,QAAQC,IAAI,qCAAuCF,EAAEnB,YAlBxCpD,EAsBnB0E,OAAS,SAACC,GAERhB,EAAa,IAAIiB,gBACjBhB,EAASD,EAAWC,OAGpB,IAAK,IAAIT,EAAI,EAAGA,EAAInD,EAAKa,MAAMwD,MAAMQ,OAAQ1B,IAAK,CAChD,IACM2B,EADe9E,EAAKa,MAAMwD,MAAMlB,GAAG4B,SACVnE,QAAQ,aAAc+D,GAErDX,MAAMH,EAAgBiB,EAAW,CAAElB,WAChCK,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GACJ,IAAIY,EAAa,GAAGC,OAAOjF,EAAKa,MAAMmC,SACtCgC,EAAWE,KAAKd,GAChBpE,EAAKe,SAAS,CACZiC,QAASgC,MAGZV,MAAM,SAACC,QAzCKvE,EAgDnBmF,gBAAkBC,mBAASpF,EAAK0E,OAAQ,KAhDrB1E,EAmDnBqF,aAAe,SAACvE,GAEVd,EAAKa,MAAMmC,QAAQ6B,OAAS,IAC9BlB,EAAW2B,QACXtF,EAAKe,SAAS,CACZiC,QAAS,MAIbhD,EAAKmF,gBAAgBrE,IA1DrBd,EAAKa,MAAQ,CACXwD,MAAO,GACPrB,QAAS,IAJMhD,wEAgEjB,OACEoB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAACiE,EAAD,CAAQvE,SAAUb,KAAKkF,iBAG3BjE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAACkE,EAAD,CAASxC,QAAS7C,KAAKU,MAAMmC,UAC7B5B,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACmE,EAAD,eA3EQ3D,aCHE4D,QACW,cAA7BjC,OAAOkC,SAASC,UAEe,UAA7BnC,OAAOkC,SAASC,UAEhBnC,OAAOkC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO3E,EAAAC,EAAAC,cAAC0E,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpC,KAAK,SAAAqC,GACjCA,EAAaC","file":"static/js/main.e0878c35.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Input, Icon } from 'antd';\nimport '../styles/Search.css';\n\nexport class Search extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            input: \"\"\n        }\n    }\n\n    onChange = (event) => {\n        // niceInput is the url friendly version of input\n        let niceInput = event.target.value.replace(/[^a-zA-Z0-9-_.]/g, '');\n\n        if (niceInput !== this.state.input) {\n            this.setState({\n                input: niceInput\n            }, () => {\n                if (niceInput !== '') {\n                    this.props.onSearch(niceInput);\n                }\n\n            });\n        }\n    }\n    render() {\n\n        return (\n            <div className=\"search\">\n                <div className=\"header\">\n                    <Icon type=\"thunderbolt\" theme=\"filled\" />\n                    <h1>Instant Username Search</h1>\n                </div>\n                <Input placeholder=\"Search username\" size=\"large\" allowClear value={this.state.input} onChange={this.onChange} />\n            </div>\n        );\n    }\n}\n\nexport default Search;\n","import React, { Component } from 'react';\nimport { Card } from 'antd';\nimport '../styles/ResultCard.css';\n\nconst { Meta } = Card;\n\n\nclass ResultCard extends Component{\n    render(){\n        let status = this.props.result.available ? \"Available\" : \"Taken\";\n        return(\n            <div className={\"card \" + status.toLowerCase()}>\n                <a href={this.props.result.url} target=\"_blank\" rel=\"noopener noreferrer\">\n                <Card hoverable loading={false}>\n                    <Meta\n                        title={this.props.result.service}\n                        description={status}\n                    />\n                </Card>\n                </a>\n            </div>\n        );\n    }\n}\n\nexport default ResultCard;","import React, { Component } from 'react';\nimport Resultcard from './ResultCard';\nimport '../styles/Results.css';\n\nclass Results extends Component{\n\n    render(){\n        let results = this.props.results.map((res, i) => {\n            // message: error message from server\n            // if it exists, that means something went wrong on the server-side\n            if(res.message != null){\n                return null;\n            }\n            return (\n                <Resultcard key={i} result={res}/>\n            );\n        });\n\n        return(\n            <div className=\"results\">\n                {results}\n            </div>\n        );\n    }\n}\n\nexport default Results;","import React, { Component } from 'react';\nimport '../styles/Footer.css';\n\nclass Footer extends Component{\n\n  render(){\n    return(\n      <footer className='footer'>\n        <div className='pull-left'>\n            {'Â© ' + new Date().getFullYear()} <a href=\"https://github.com/umutcanbolat/instant-username-search/blob/master/LICENSE\">GPL 3.0</a>\n        </div>\n        <div className='pull-right'>\n            <a href=\"https://github.com/umutcanbolat/instant-username-search/\">Contribute on Github</a>\n        </div>\n      </footer>\n    );\n  }\n}\nexport default Footer;","import React, { Component } from 'react';\nimport { debounce } from \"debounce\";\nimport Search from './Search';\nimport Results from './Results';\nimport Footer from './Footer';\nimport 'antd/dist/antd.css';  // or 'antd/dist/antd.less'\nimport '../styles/App.css';\n\nwindow.apiUrl = 'https://instant-username-search-api.herokuapp.com/';\nconst checkEndpoint = window.apiUrl + 'check';\n\n// AbortController and signal to cancel fetch requests\nvar controller;\nvar signal;\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      sites: [],\n      results: []\n    }\n  }\n\n  componentDidMount = () => {\n    // fetch all the services available to check\n    fetch(window.apiUrl + 'services/getAll')\n      .then(response => response.json())\n      .then(responseJson => {\n        this.setState({\n          sites: responseJson\n        });\n      })\n      .catch((e) => {\n        console.log('error while fetching services list' + e.message);\n      });\n  }\n\n  search = (username) => {\n    // instantiniate a new controller for this cycle\n    controller = new AbortController();\n    signal = controller.signal;\n\n    // loop through all sites and check the availability\n    for (let i = 0; i < this.state.sites.length; i++) {\n      const checkService = this.state.sites[i].endpoint;\n      const checkUser = checkService.replace('{username}', username);\n\n      fetch(checkEndpoint + checkUser, { signal })\n        .then(response => response.json())\n        .then(responseJson => {\n          let newResults = [].concat(this.state.results);\n          newResults.push(responseJson);\n          this.setState({\n            results: newResults\n          });\n        })\n        .catch((e) => {\n          //console.log(e.message);\n        });\n    }\n  }\n\n  // debounce the search function\n  debouncedSearch = debounce(this.search, 800);\n\n  // search on input changes\n  inputChanged = (input) => {\n    // if this is not the first cycle, clean results in the state\n    if (this.state.results.length > 0) {\n      controller.abort();\n      this.setState({\n        results: []\n      });\n    }\n    // invoke debounced search\n    this.debouncedSearch(input);\n  }\n\n  render() {\n    return (\n      <div>\n        <div className=\"jumbotron\">\n          <div className=\"container\">\n            <Search onSearch={this.inputChanged} />\n          </div>\n        </div>\n        <div className=\"container\">\n          <Results results={this.state.results} />\n          <hr />\n          <Footer />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}