{"version":3,"sources":["components/Search.js","components/ResultCard.js","components/Results.js","components/Footer.js","components/App.js","serviceWorker.js","index.js","resources/astronaut.svg"],"names":["Search","_Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onChange","event","niceInput","target","value","replace","state","input","setState","onSearch","onEmpty","inherits","createClass","key","react_default","a","createElement","className","icon","type","theme","placeholder","size","allowClear","Component","Meta","Card","ResultCard","loading","card","hoverable","status","result","available","toLowerCase","href","url","rel","title","service","description","Results","results","i","push","components_ResultCard","map","res","message","length","Footer","Date","getFullYear","window","apiUrl","controller","signal","checkEndpoint","App","componentDidMount","fetch","then","response","json","responseJson","sites","catch","e","console","log","componentWillUnmount","cancelAllRequests","search","username","AbortController","checkUser","endpoint","newResults","concat","debouncedSearch","debounce","inputChanged","isQueried","inputEmptied","undefined","abort","content","landingPage","alt","src","astronaut","index_es","id","defaultMessage","values","appName","components_Results","components_Search","components_Footer","Boolean","location","hostname","match","addLocaleData","toConsumableArray","locale_en","locale_de","messages","de","messages_de","en","messages_en","language","navigator","split","ReactDOM","render","locale","components_App","document","getElementById","serviceWorker","ready","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.d9bc8822.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Input, Icon } from 'antd';\nimport '../styles/Search.css';\n\nexport class Search extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            input: \"\"\n        }\n    }\n\n    onChange = (event) => {\n        // niceInput is the url friendly version of the input\n        let niceInput = event.target.value.replace(/[^a-zA-Z0-9-_.]/g, '');\n\n        if (niceInput !== this.state.input) {\n            this.setState({\n                input: niceInput\n            }, () => {\n                if (niceInput !== '') {\n                    this.props.onSearch(niceInput);\n                } else {\n                    this.props.onEmpty();\n                }\n            });\n        }\n    }\n    render() {\n\n        return (\n            <div className=\"search\">\n                <div className=\"header\">\n                    <Icon type=\"thunderbolt\" theme=\"filled\" />\n                    <h1>Instant Username Search</h1>\n                </div>\n                <Input placeholder=\"Search username\" size=\"large\" allowClear value={this.state.input} onChange={this.onChange} />\n            </div>\n        );\n    }\n}\n\nexport default Search;\n","import React, { Component } from 'react';\nimport { Card } from 'antd';\nimport '../styles/ResultCard.css';\n\nconst { Meta } = Card;\n\n\nclass ResultCard extends Component {\n    render() {\n        if (this.props.loading) {\n            return (\n                <div className={\"loading card\"}>\n                    <Card hoverable loading={true}>\n                    </Card>\n                </div>\n            );\n        } else {\n            let status = this.props.result.available ? \"Available\" : \"Taken\";\n            return (\n                <div className={\"card \" + status.toLowerCase()}>\n                    <a href={this.props.result.url} target=\"_blank\" rel=\"noopener noreferrer\">\n                        <Card hoverable>\n                            <Meta\n                                title={this.props.result.service}\n                                description={status}\n                            />\n                        </Card>\n                    </a>\n                </div>\n            );\n        }\n    }\n}\n\nexport default ResultCard;","import React, { Component } from 'react';\nimport Resultcard from './ResultCard';\nimport '../styles/Results.css';\n\nclass Results extends Component {\n\n    render() {\n        let results = [];\n        let loadingCount = 12;\n\n        if (this.props.loading === true) {\n            for (let i = 0; i < loadingCount; i++) {\n                results.push(<Resultcard key={i} loading={true} />);\n            }\n        } else {\n            results = this.props.results.map((res, i) => {\n                // message: error message from server\n                // if it exists, that means something went wrong on the server-side\n                if (res.message != null) {\n                    return null;\n                }\n                return (\n                    <Resultcard key={i} result={res} />\n                );\n            });\n            let i = 0;\n            while (results.length < loadingCount) {\n                results.push(<Resultcard key={results.length + i} loading={true} />);\n            }\n        }\n\n        return (\n            <div className=\"results\">\n                {results}\n            </div>\n        );\n    }\n}\n\nexport default Results;","import React, { Component } from 'react';\nimport '../styles/Footer.css';\n\nclass Footer extends Component{\n\n  render(){\n    return(\n      <footer className='footer'>\n        <div className='pull-left'>\n            {'© ' + new Date().getFullYear()} <a href=\"https://github.com/umutcanbolat/instant-username-search/blob/master/LICENSE\">GPL 3.0</a>\n        </div>\n        <div className='pull-right'>\n            <a href=\"https://github.com/umutcanbolat/instant-username-search/\">Contribute on Github</a>\n        </div>\n      </footer>\n    );\n  }\n}\nexport default Footer;","import React, { Component } from 'react';\nimport { debounce } from \"debounce\";\nimport Search from './Search';\nimport Results from './Results';\nimport Footer from './Footer';\nimport astronaut from '../resources/astronaut.svg'\nimport 'antd/dist/antd.css';  // or 'antd/dist/antd.less'\nimport '../styles/App.css';\nimport { FormattedMessage } from 'react-intl';\n\nwindow.apiUrl = 'https://instant-username-search-api.herokuapp.com/';\nconst checkEndpoint = window.apiUrl + 'check';\n\n// AbortController and signal to cancel fetch requests\nvar controller;\nvar signal;\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      sites: [],\n      results: [],\n      isQueried: false\n    }\n  }\n\n  componentDidMount = () => {\n    // fetch all the services available to check\n    fetch(window.apiUrl + 'services/getAll')\n      .then(response => response.json())\n      .then(responseJson => {\n        this.setState({\n          sites: responseJson\n        });\n      })\n      .catch((e) => {\n        console.log('error while fetching services list' + e.message);\n      });\n  }\n\n  componentWillUnmount = () => {\n    // cancel all requests before unmounting\n    this.cancelAllRequests();\n  }\n\n  search = (username) => {\n    // instantiniate a new controller for this cycle\n    controller = new AbortController();\n    signal = controller.signal;\n\n    // loop through all sites and check the availability\n    for (let i = 0; i < this.state.sites.length; i++) {\n      const checkService = this.state.sites[i].endpoint;\n      const checkUser = checkService.replace('{username}', username);\n\n      fetch(checkEndpoint + checkUser, { signal })\n        .then(response => response.json())\n        .then(responseJson => {\n          let newResults = [].concat(this.state.results);\n          newResults.push(responseJson);\n          this.setState({\n            results: newResults\n          });\n        })\n        .catch((e) => {\n          //console.log(e.message);\n        });\n    }\n  }\n\n  // debounce the search function\n  debouncedSearch = debounce(this.search, 800);\n\n  // search on input changes\n  inputChanged = (input) => {\n    this.setState({\n      isQueried: true\n    });\n\n    this.cancelAllRequests();\n    this.setState({\n      results: []\n    });\n\n    // invoke debounced search\n    this.debouncedSearch(input);\n  }\n\n  inputEmptied = () => {\n    this.cancelAllRequests();\n    this.setState({\n      isQueried: false\n    });\n  }\n\n  cancelAllRequests = () => {\n    if (controller !== undefined) {\n      controller.abort();\n    }\n  }\n\n  render() {\n    let landingPage = (\n      <div className='landing'>\n        <img alt='astronaut' className='astronaut' src={astronaut} />\n        <div className='intro'>\n          <h2>\n            <FormattedMessage id=\"app.description.title\"\n              defaultMessage=\"Check username availability as you type\"\n              description=\"Description title on main page\" />\n          </h2>\n          <p>\n            <FormattedMessage id=\"app.description.body\"\n              defaultMessage=\"{appName} will check more than 100 social media sites for you. Results will appear here as you type!\"\n              description=\"Description body on main page\"\n              values={{ appName: 'Instant Username Search' }} />\n          </p>\n        </div>\n      </div>\n    );\n\n    let content;\n    if (this.state.isQueried) {\n      if (this.state.results.length === 0) {\n        // loading results\n        content = <Results loading={true} />;\n      } else {\n        // show results\n        content = <Results results={this.state.results} />;\n      }\n    } else {\n      // empty search\n      content = landingPage;\n    }\n\n    return (\n      <div>\n        <div className=\"jumbotron\">\n          <div className=\"container\">\n            <Search onSearch={this.inputChanged} onEmpty={this.inputEmptied} />\n          </div>\n        </div>\n        <div className=\"container\">\n          {content}\n          <hr />\n          <Footer />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport { IntlProvider } from \"react-intl\";\nimport { addLocaleData } from \"react-intl\";\nimport locale_en from 'react-intl/locale-data/en';\nimport locale_de from 'react-intl/locale-data/de';\nimport messages_de from \"./translations/de.json\";\nimport messages_en from \"./translations/en.json\";\n\naddLocaleData([...locale_en, ...locale_de]);\n\nconst messages = {\n    'de': messages_de,\n    'en': messages_en\n};\n\nconst language = navigator.language.split(/[-_]/)[0];  // language without region code\n\nReactDOM.render(\n    <IntlProvider locale={language} messages={messages[language]}>\n        <App />\n    </IntlProvider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/astronaut.5bd53660.svg\";"],"sourceRoot":""}